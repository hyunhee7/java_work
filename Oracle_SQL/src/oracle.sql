SELECT EMP_NAME AS 이름,
	   SALARY*12 AS "1년 급여",
	   ( SALARY+(SALARY*BONUS_PCT))*12 AS 총소득 
FROM   EMPLOYEE;

SELECT EMP_ID,
       EMP_NAME,
       '재직' AS 근무여부
FROM   EMPLOYEE; 

SELECT DISTINCT DEPT_ID
FROM EMPLOYEE;

SELECT DISTINCT JOB_ID, DEPT_ID
FROM EMPLOYEE;

SELECT EMP_NAME AS 이름,
	   DEPT_ID AS 부서
FROM EMPLOYEE
WHERE DEPT_ID='90';

SELECT EMP_NAME AS 이름,
	   SALARY AS 급여
FROM EMPLOYEE
WHERE SALARY > 4000000;

SELECT EMP_NAME AS 이름,
	   DEPT_ID AS 부서,
	   SALARY AS 급여
FROM EMPLOYEE
WHERE DEPT_ID = '90'
AND SALARY > 2000000;

SELECT EMP_NAME AS 이름,
	   DEPT_ID AS 부서,
	   SALARY AS 급여
FROM EMPLOYEE
WHERE DEPT_ID='90'
OR DEPT_ID='20';

SELECT EMP_ID||EMP_NAME||SALARY
FROM EMPLOYEE;

SELECT EMP_NAME||'의 월급은 '||SALARY||'원 입니다'
FROM EMPLOYEE;

SELECT EMP_NAME,
	   SALARY
FROM   EMPLOYEE
WHERE SALARY BETWEEN 3500000 AND 5500000;

SELECT EMP_NAME,
       SALARY
FROM EMPLOYEE
WHERE SALARY >= 3500000
AND SALARY <= 5500000;

SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE EMP_NAME LIKE '김%';

SELECT EMP_NAME, PHONE
FROM EMPLOYEE
WHERE PHONE LIKE '___9_______';

SELECT EMP_NAME,
	   EMAIL
FROM EMPLOYEE
WHERE EMAIL LIKE '___\_%' ESCAPE '\';

SELECT EMP_NAME,
	   EMAIL
FROM EMPLOYEE
WHERE EMAIL LIKE '___#_%' ESCAPE '#';

SELECT * FROM JOB;
SELECT * FROM EMPLOYEE;

SELECT EMP_NAME, MGR_ID, DEPT_ID
FROM EMPLOYEE
WHERE MGR_ID IS NULL
AND DEPT_ID IS NULL;

SELECT EMP_NAME, DEPT_ID, BONUS_PCT
FROM EMPLOYEE
WHERE DEPT_ID IS NULL
AND BONUS_PCT IS NOT NULL;

SELECT EMP_NAME, DEPT_ID, SALARY
FROM EMPLOYEE
WHERE DEPT_ID IN ('60', '90');

SELECT EMP_NAME, DEPT_ID, SALARY
FROM EMPLOYEE
WHERE DEPT_ID=60
OR DEPT_ID=90;

SELECT EMP_NAME, SALARY, DEPT_ID
FROM EMPLOYEE
WHERE (DEPT_ID = '20'
OR DEPT_ID='90')
AND SALARY > 3000000;

SELECT DEPARTMENT_NAME AS "학과 명", 
	   CATEGORY AS 계열
FROM TB_DEPARTMENT;

SELECT DEPARTMENT_NAME||'의 정원은 '||CAPACITY||'명 입니다'
	   AS "학과별 정원"
FROM TB_DEPARTMENT;

SELECT STUDENT_NO, STUDENT_SSN
FROM TB_STUDENT;

SELECT DEPARTMENT_NO, DEPARTMENT_NAME
FROM TB_DEPARTMENT;

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE ABSENCE_YN='Y'
AND DEPARTMENT_NO='001'
AND STUDENT_SSN LIKE '______-2%';

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN ('A513079','A513090','A513091','A513110','A513119');

SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY>=20 AND CAPACITY<=30;

SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO IS NULL;

SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

SELECT DISTINCT CATEGORY
FROM TB_DEPARTMENT;

SELECT STUDENT_ADDRESS
FROM TB_STUDENT;

SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN='N'
AND ENTRANCE_DATE LIKE '02%'
AND STUDENT_ADDRESS LIKE '%전주%';

SELECT LENGTH(CHARTYPE),
	   LENGTH(VARCHARTYPE)
FROM COLUMN_LENGTH;

SELECT EMAIL,
	   INSTR( EMAIL,'c',-1,2) 위치
FROM EMPLOYEE;

SELECT EMAIL,
	   INSTR(EMAIL, 'c', INSTR(EMAIL,'.')-1) 위치
FROM EMPLOYEE;

SELECT EMAIL AS 원본데이터,
	   LENGTH(EMAIL) AS 원본길이,
	   LPAD(EMAIL, 20, '.') AS 적용결과,
	   LENGTH(LPAD(EMAIL,20,'.')) AS 결과길이
FROM EMPLOYEE;	   

SELECT LTRIM('   tech') FROM DUAL;
SELECT LTRIM('   tech',' ') FROM DUAL;
SELECT LTRIM('000123','0') FROM DUAL;
SELECT LTRIM('123123Tech','123') FROM DUAL;
SELECT LTRIM('123123Tech123','123')FROM DUAL;
SELECT LTRIM('xyxzyyyTech','xyz') FROM DUAL;
SELECT LTRIM('6372Tech','0123456789') FROM DUAL;

SELECT TRIM ('  Tech  ') FROM DUAL;
SELECT TRIM ('a' FROM 'aatechaaa') FROM DUAL;
SELECT TRIM (LEADING '0' FROM '000123') FROM DUAL;
SELECT TRIM (TRAILING '1' FROM 'Tech1') FROM DUAL;
SELECT TRIM (BOTH '1' FROM '123Tech111') FROM DUAL;
SELECT TRIM (LEADING FROM '  Tech  ') FROM DUAL;

SELECT SUBSTR ('This is a test', 6, 2) FROM DUAL;
SELECT SUBSTR ('This is a test', 6) FROM DUAL;
SELECT SUBSTR ('이것은 연습입니다', 3, 4) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', 1, 4) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', -3, 3) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', -6, 3) FROM DUAL;
SELECT SUBSTR ('TechOnTheNet', -8, 2) FROM DUAL;

SELECT EMP_NAME AS 이름,
	   SUBSTR(HIRE_DATE,1,2)||'년 '||
	   SUBSTR(HIRE_DATE,4,2)||'월 '||
	   SUBSTR(HIRE_DATE,7,2)||'일 ' AS 입사일
	   FROM EMPLOYEE
	   WHERE JOB_ID='J7';
	   

SELECT ROUND(125.315) FROM DUAL;
SELECT ROUND(125.315, 0) FROM DUAL;
SELECT ROUND(125.315, 1) FROM DUAL;
SELECT ROUND(125.315, -1) FROM DUAL;
SELECT ROUND(125.315, 3) FROM DUAL;
SELECT ROUND(-125.315, 2) FROM DUAL;

SELECT TRUNC (125.315) FROM DUAL;
SELECT TRUNC (125.315, 0) FROM DUAL;
SELECT TRUNC (125.315, 1) FROM DUAL;
SELECT TRUNC (125.315, -1) FROM DUAL;
SELECT TRUNC (125.315, 3) FROM DUAL;
SELECT TRUNC (-125.315, -3) FROM DUAL;

SELECT EMP_NAME,
	   HIRE_DATE,
	   ADD_MONTHS(HIRE_DATE, 240)
FROM EMPLOYEE;

SELECT EMP_NAME,
	   HIRE_DATE,
	   MONTHS_BETWEEN(SYSDATE,HIRE_DATE)/12 AS 근무년수
FROM EMPLOYEE
WHERE MONTHS_BETWEEN(SYSDATE,HIRE_DATE) > 120;

SELECT TO_CHAR(1234, '99999') FROM DUAL;
SELECT TO_CHAR(1234, 'L99999') FROM DUAL;

SELECT TO_CHAR( SYSDATE, 'PM HH24:MI:SS') FROM DUAL;
SELECT TO_CHAR( SYSDATE, 'AM HH:MI:SS') FROM DUAL;

SELECT TO_CHAR( SYSDATE, 'MON DY, YYYY') FROM DUAL;
SELECT TO_CHAR( SYSDATE, 'YYYY-fmMM-DD DAY') FROM DUAL;
SELECT TO_CHAR( SYSDATE, 'YYYY-MM-fmDD DAY') FROM DUAL;

SELECT EMP_NAME AS 이름,
	   TO_CHAR(HIRE_DATE, 'YYYY-MM-DD') AS 입사일
FROM EMPLOYEE
WHERE JOB_ID = 'J7';

SELECT EMP_NAME AS 이름,
	   TO_CHAR(HIRE_DATE, 'YYYY"년" MM"월" DD"일"') AS 입사일
FROM EMPLOYEE
WHERE JOB_ID = 'J7';

SELECT TO_DATE('20100101','YYYYMMDD') FROM DUAL;
SELECT TO_CHAR('20100101','YYYY, MON') FROM DUAL;
SELECT TO_CHAR( TO_DATE('20100101', 'YYYYMMDD'),'YYYY, MON') FROM DUAL;
SELECT TO_DATE('041030 143000','YYMMDD HH24MISS') FROM DUAL;
SELECT TO_CHAR(TO_DATE('041030 143000','YYMMDD HH24MISS'),'DD-MON-YY HH:MI:SS PM') FROM DUAL;
SELECT TO_DATE('980630', 'YYMMDD') FROM DUAL;
SELECT TO_CHAR(TO_DATE('980630','RRMMDD'),'YYYY.MM.DD')FROM DUAL;
SELECT TO_CHAR(TO_DATE('980630','YYMMDD'),'YYYY.MM.DD')FROM DUAL;

SELECT EMP_NAME, EMP_NO,
	   SUBSTR(EMP_NO, 1, 6) AS 앞부분,
	   SUBSTR(EMP_NO, 8) AS 뒷부분,
	   TO_NUMBER(SUBSTR(EMP_NO,1,6))+TO_NUMBER(SUBSTR(EMP_NO,8)) AS 결과
FROM EMPLOYEE
WHERE EMP_ID = '101';

SELECT EMP_NAME, SALARY, NVL(BONUS_PCT,0)
FROM EMPLOYEE
WHERE SALARY > 3500000;

SELECT EMP_NAME, (SALARY*12)+((SALARY*12)*BONUS_PCT)
FROM EMPLOYEE
WHERE SALARY > 3500000;


SELECT EMP_NAME, (SALARY*12)+((SALARY*12)*NVL(BONUS_PCT,0))
FROM EMPLOYEE
WHERE SALARY > 3500000;

SELECT EMP_NAME, DECODE(SUBSTR(EMP_NO,8,1),'1','남','2','여','3','남','4','여') AS 성별
FROM EMPLOYEE
WHERE DEPT_ID='50';

SELECT EMP_NAME, DECODE(SUBSTR(EMP_NO,8,1), '1','남','3','남','여')AS 성별
FROM EMPLOYEE
WHERE DEPT_ID='50';

SELECT EMP_ID, EMP_NAME,
	   DECODE(MGR_ID, NULL, '없음', MGR_ID) AS 관리자
FROM EMPLOYEE
WHERE JOB_ID = 'J4';

SELECT EMP_ID, EMP_NAME, NVL(MGR_ID, '없음') AS 관리자
FROM EMPLOYEE
WHERE JOB_ID = 'J4';

SELECT EMP_NAME, 
	   JOB_ID, 
	   SALARY, 
	   DECODE(JOB_ID,
			  'J7', SALARY*1.1,
			  'J6', SALARY*1.15,
			  'J5', SALARY*1.2,
			  SALARY*1.05) AS 인상급여
FROM EMPLOYEE;

SELECT EMP_NAME, 
	   JOB_ID, 
	   SALARY, 
	   CASE JOB_ID WHEN 'J7' THEN TO_CHAR(SALARY*1.1)
	   			   WHEN 'J6' THEN TO_CHAR(SALARY*1.15)
	   			   WHEN 'J7' THEN TO_CHAR(SALARY*1.2)
	   			   ELSE TO_CHAR(SALARY*1.05) END
	   			   AS 인상급여
FROM EMPLOYEE;

SELECT EMP_ID,
	   EMP_NAME,
	   SALARY,
	   CASE WHEN SALARY <= 3000000 THEN '초급'
	        WHEN SALARY <= 4000000 THEN '중급'
	        ELSE '고급' END AS 구분
FROM EMPLOYEE;

SELECT AVG(BONUS_PCT) AS 기본평균,
	   AVG(DISTINCT BONUS_PCT) AS 중복제거평균,
	   AVG(NVL(BONUS_PCT,0)) AS NULL포함평균
FROM EMPLOYEE
WHERE DEPT_ID IN ('50','90')
OR DEPT_ID IS NULL;

SELECT * FROM EMPLOYEE WHERE DEPT_ID='50' OR DEPT_ID IS NULL;

SELECT COUNT(*),
	   COUNT(JOB_ID),
	   COUNT(DISTINCT JOB_ID)
FROM EMPLOYEE
WHERE DEPT_ID = '50'
OR DEPT_ID IS NULL;

SELECT EMP_NAME, HIRE_DATE, DEPT_ID
FROM EMPLOYEE
WHERE HIRE_DATE > TO_DATE('20030101','YYYYMMDD')
ORDER BY DEPT_ID DESC, HIRE_DATE, EMP_NAME;

SELECT EMP_NAME AS 이름,
	   HIRE_DATE AS 입사일,
	   DEPT_ID AS 부서코드
FROM EMPLOYEE
WHERE HIRE_DATE > TO_DATE('20030101','YYYYMMDD')
ORDER BY 3 DESC, 2, 1;

SELECT EMP_NAME AS 이름,
	   HIRE_DATE AS 입사일,
	   DEPT_ID AS 부서코드
FROM EMPLOYEE
WHERE HIRE_DATE > TO_DATE('20030101','YYYYMMDD')
ORDER BY 부서코드 DESC, 입사일, 이름;

SELECT DEPT_ID AS 부서,
	   ROUND(AVG(SALARY),-4) AS 평균급여
FROM EMPLOYEE
GROUP BY DEPT_ID
ORDER BY 1;

SELECT DECODE(SUBSTR(EMP_NO,8,1), '1','남','3','남','여') AS 성별,
	   ROUND(AVG(SALARY),-4) AS 평균급여
FROM EMPLOYEE
GROUP BY DECODE(SUBSTR(EMP_NO,8,1),'1','남','3','남','여')
ORDER BY 2;

SELECT DEPT_ID, COUNT(*)
FROM EMPLOYEE
GROUP BY DEPT_ID
ORDER BY 1;

SELECT DEPT_ID, MAX(SUM(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_ID;

SELECT MAX(SUM(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_ID;


SELECT DEPT_ID, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_ID
HAVING SUM(SALARY) > 9000000;

SELECT DEPT_ID, SUM(SALARY)
FROM EMPLOYEE
WHERE SUM(SALARY) > 9000000
GROUP BY DEPT_ID;

SELECT DEPT_ID,
	   SUM(SALARY)
FROM EMPLOYEE
WHERE DEPT_ID IS NOT NULL
GROUP BY ROLLUP(DEPT_ID);

SELECT DEPT_ID,
	   JOB_ID,
	   SUM(SALARY)
FROM EMPLOYEE
WHERE DEPT_ID IS NOT NULL
AND JOB_ID IS NOT NULL
GROUP BY ROLLUP(DEPT_ID, JOB_ID)
ORDER BY DEPT_ID, JOB_ID;


SELECT STUDENT_NO AS 학번, 
	   STUDENT_NAME AS 이름, 
	   TO_CHAR(ENTRANCE_DATE, 'YYYY-MM-DD') AS 입학년도
FROM TB_STUDENT
WHERE DEPARTMENT_NO = '002'
ORDER BY ENTRANCE_DATE ASC;


SELECT EMP_NAME, EMP_NO,
	   SUBSTR(EMP_NO, 1, 6) AS 앞부분,
	   SUBSTR(EMP_NO, 8) AS 뒷부분,
	   TO_NUMBER(SUBSTR(EMP_NO,1,6))+TO_NUMBER(SUBSTR(EMP_NO,8)) AS 결과
FROM EMPLOYEE
WHERE EMP_ID = '101';


SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE TO_NUMBER(SUBSTR(PROFESSOR_NAME,1))>3
OR TO_NUMBER(SUBSTR(PROFESSOR_NAME,1))<3;

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE E,
     DEPARTMENT D
WHERE E.DEPT_ID = D.DEPT_ID;

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE
JOIN DEPARTMENT USING (DEPT)

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE
JOIN DEPARTMENT USING(DEPT_ID);

SELECT EMP_NAME, DEPT_NAME, LOC_DESCRIBE
FROM EMPLOYEE   E
JOIN DEPARTMENT D ON(E.DEPT_ID=D.DEPT_ID);
JOIN LOCATION   L ON(L.LOCATION_ID=D.LOC_ID);

SELECT EMP_NAME, DEPT_NAME, LOC_DESCRIBE
FROM EMPLOYEE   E
JOIN DEPARTMENT D USING(DEPT_ID);
JOIN LOCATION   L ON(L.LOCATION_ID = D.LOC_ID);


SELECT *
FROM EMPLOYEE;

SELECT *
FROM DEPARTMENT;

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
ORDER BY 1;

SELECT EMP_NAME, DEPT_NAME
FROM DEPARTMENT
RIGHT JOIN EMPLOYEE USING (DEPT_ID)
ORDER BY 1;

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE
RIGHT JOIN DEPARTMENT USING (DEPT_ID)
ORDER BY 1;

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE
FULL JOIN DEPARTMENT USING (DEPT_ID)
ORDER BY 1;

SELECT *
FROM SAL_GRADE;

SELECT EMP_NAME, SALARY, SLEVEL
FROM EMPLOYEE
JOIN SAL_GRADE ON (SALARY BETWEEN LOWEST AND HIGHEST)
ORDER BY 3;

SELECT E.EMP_NAME AS 직원,
	   M.EMP_NAME AS 관리자
FROM EMPLOYEE E
RIGHT JOIN EMPLOYEE M ON (E.MGR_ID=M.EMP_ID)
ORDER BY 1;

SELECT EMP_NAME, JOB_TITLE, DEPT_NAME
FROM EMPLOYEE E
JOIN JOB J ON(E.JOB_ID=J.JOB_ID)
JOIN DEPARTMENT D ON(E.DEPT_ID=D.DEPT_ID);

SELECT EMP_NAME, DEPT_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_ID)
JOIN DEPARTMENT USING(DEPT_ID)
JOIN LOCATION ON (LOC_ID = LOCATION_ID)
WHERE JOB_TITLE='대리'
AND LOC_DESCRIBE LIKE '아시아%';

SELECT EMP_NAME, JOB_ID, HIRE_DATE
FROM EMPLOYEE
WHERE DEPT_ID='20'
UNION
SELECT DEPT_NAME, DEPT_ID, NULL
FROM DEPARTMENT
WHERE DEPT_ID = '20';

SELECT EMP_NAME, TO_CHAR(SALARY)
FROM EMPLOYEE
WHERE DEPT_ID = '20'
UNION
SELECT DEPT_NAME, DEPT_ID
FROM DEPARTMENT
WHERE DEPT_ID = '20';

SELECT EMP_NAME, JOB_ID, SALARY
FROM EMPLOYEE
WHERE JOB_ID = (SELECT JOB_ID
				FROM EMPLOYEE
				WHERE EMP_NAME = '나승원')
AND SALARY > (SELECT SALARY
			  FROM EMPLOYEE
			  WHERE EMP_NAME = '나승원')
			  
SELECT EMP_NAME, JOB_ID, SALARY
FROM EMPLOYEE
WHERE SALARY = (SELECT MIN(SALARY)
				FROM EMPLOYEE);

-- 부서별 급여 총합이 최고인 부서의 부서이름과 급여총합을 검색하라
SELECT DEPT_NAME, SUM(SALARY)
FROM EMPLOYEE
LEFT JOIN DEPARTMENT USING (DEPT_ID)
GROUP BY DEPT_ID, DEPT_NAME
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY))
					  FROM EMPLOYEE
					  GROUP BY DEPT_ID);

					  
SELECT EMP_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING (JOB_ID)
WHERE JOB_TITLE='대리'
AND SALARY > ANY (SELECT SALARY
				  FROM EMPLOYEE
				  JOIN JOB USING (JOB_ID)
				  WHERE JOB_TITLE = '과장');
				  
SELECT EMP_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING (JOB_ID)
WHERE JOB_TITLE='대리'
AND SALARY > ALL (SELECT SALARY
				  FROM EMPLOYEE
				  JOIN JOB USING (JOB_ID)
				  WHERE JOB_TITLE = '과장');	
				  
SELECT EMP_NAME, JOB_TITLE, SALARY
FROM EMPLOYEE
LEFT JOIN JOB USING (JOB_ID)
WHERE (NVL(JOB_ID,' '), SALARY) IN
	  (SELECT NVL(JOB_ID,' '),
	  		  TRUNC(AVG(SALARY),-5)
	   FROM EMPLOYEE
	   GROUP BY JOB_ID)
ORDER BY JOB_ID;

SELECT EMP_NAME, JOB_TITLE, SALARY
FROM (SELECT JOB_ID, TRUNC(AVG(SALARY), -5) AS JOBAVG
	  FROM EMPLOYEE
	  GROUP BY JOB_ID) V
JOIN EMPLOYEE E ON
	 (JOBAVG= SALARY AND
	  NVL(E.JOB_ID,' ')=NVL(V.JOB_ID,' '))
LEFT JOIN JOB J ON (E.JOB_ID = J.JOB_ID)
ORDER BY JOB_ID;

SELECT EMP_NAME, JOB_TITLE, SALARY
FROM EMPLOYEE E
LEFT JOIN JOB J ON (E.JOB_ID = J.JOB_ID)
WHERE SALARY = (SELECT TRUNC(AVG(SALARY), -5)
				FROM EMPLOYEE
				WHERE NVL(JOB_ID, ' ') = 
					  NVL(E.JOB_ID, ' '))
ORDER BY E.JOB_ID;

SELECT EMP_ID, EMP_NAME, '관리자' AS 구분
FROM EMPLOYEE E
WHERE EXISTS (SELECT NULL
			  FROM EMPLOYEE
			  WHERE E.EMP_ID = MGR_ID)
UNION
SELECT EMP_ID, EMP_NAME, '직원'
FROM EMPLOYEE E2
WHERE NOT EXISTS (SELECT NULL
				  FROM EMPLOYEE
				  WHERE E2.EMP_ID=MGR_ID)
ORDER BY 3, 1;

1.
SELECT STUDENT_NAME AS "학생 이름", STUDENT_ADDRESS AS "주소지"
FROM TB_STUDENT
ORDER BY STUDENT_NAME;

2.
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN='Y'
ORDER BY  SUBSTR(STUDENT_SSN, 1, 2) DESC;

3. 
SELECT STUDENT_NAME AS "학생 이름", STUDENT_NO AS "학번", STUDENT_ADDRESS AS "거주지 주소"
FROM TB_STUDENT
WHERE STUDENT_ADDRESS LIKE '강원도%' OR STUDENT_ADDRESS LIKE '경기도%'
AND
SUBSTR(STUDENT_NO, 1, 1)='9'
ORDER BY STUDENT_NAME ASC;

4.
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO=(SELECT DEPARTMENT_NO 
					 FROM TB_DEPARTMENT
					 WHERE DEPARTMENT_NAME='법학과')
ORDER BY SUBSTR(PROFESSOR_SSN, 1, 2) ASC;

5. 
SELECT STUDENT_NO, POINT
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
WHERE CLASS_NO = 'C3118100' AND TERM_NO='200402'
ORDER BY POINT DESC;

6.
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
ORDER BY STUDENT_NAME ASC;

7.
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO);

8.
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_PROFESSOR USING (DEPARTMENT_NO);

9.
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_PROFESSOR USING (DEPARTMENT_NO)
JOIN TB_DEPARTMENT D USING (DEPARTMENT_NO)
WHERE D.CATEGORY = '인문사회';

10. S
SELECT STUDENT_NO AS "학번", STUDENT_NAME AS "학생 이름", AVG(SUM(POINT)) AS "전체 평점"
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME='음악학과'
GROUP BY STUDENT_NO, STUDENT_NAME;



11. 
SELECT DEPARTMENT_NAME AS "학과 이름", STUDENT_NAME AS "학생 이름", PROFESSOR_NAME AS "지도교수이름"
FROM TB_STUDENT S
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
JOIN TB_PROFESSOR P ON (S.COACH_PROFESSOR_NO=P.PROFESSOR_NO)
WHERE STUDENT_NO='A313047';

12. S
SELECT STUDENT_NAME, TERM_NO
FROM TB_GRADE
JOIN TB_STUDENT USING (STUDENT_NO)
JOIN TB_CLASS USING (CLASS_NO)
WHERE TERM_NO='2007%'
AND CLASS_NAME='인간관계론';

13.AAA
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
JOIN TB_CLASS_PROFESSOR USING (CLASS_NO)
WHERE CATEGORY='예체능'
AND PROFESSOR_NO IS NULL;

14. S 
SELECT STUDENT_NAME AS "학생이름", PROFESSOR_NAME AS "지도교수"
FROM TB_DEPARTMENT
JOIN TB_PROFESSOR USING (DEPARTMENT_NO)
LEFT JOIN TB_STUDENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME='서반아어학과';


15.
SELECT STUDENT_NO AS "학번",
	   STUDENT_NAME AS "이름",
	   DEPARTMENT_NAME AS "학과 이름",
	   AVG(POINT) AS "평점"
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
JOIN TB_GRADE USING (STUDENT_NO)
WHERE ABSENCE_YN <> 'Y'
GROUP BY STUDENT_NO, STUDENT_NAME,DEPARTMENT_NAME
HAVING AVG(POINT) >= 4.0
ORDER BY 1;

16.
SELECT CLASS_NO, CLASS_NAME, AVG(POINT)
FROM TB_CLASS
JOIN TB_GRADE USING (CLASS_NO)
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NAME='환경조경학과'
GROUP BY CLASS_NO, CLASS_NAME;

17.
SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME=(SELECT DEPARTMENT_NAME
	   FROM TB_DEPARTMENT
	   JOIN TB_STUDENT USING (DEPARTMENT_NO)
	   WHERE STUDENT_NAME='최경희');
	   
18.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
JOIN TB_GRADE USING (STUDENT_NO)
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
WHERE DEPARTMENT_NAME='국어국문학과'
AND MAX(AVG(POINT));
GROUP BY STUDENT_NO, STUDENT_NAME;

19.
SELECT DEPARTMENT_NAME AS "계열 학과명",
	   ROUND(AVG(POINT),1) AS "전공평점"
FROM TB_DEPARTMENT
JOIN TB_CLASS USING (DEPARTMENT_NO)
JOIN TB_GRADE USING (CLASS_NO)
WHERE CATEGORY IN (
				SELECT CATEGORY
				FROM TB_DEPARTMENT
				WHERE DEPARTMENT_NAME='환경조경학과'
				)
GROUP BY DEPARTMENT_NAME
ORDER BY 1;


SELECT DEPARTMENT_NAME AS "계열 학과명",
			 ROUND(AVG(POINT), 1) AS "전공평점"
FROM   TB_DEPARTMENT 
JOIN   TB_CLASS C USING (DEPARTMENT_NO)
JOIN   TB_GRADE USING (CLASS_NO)
WHERE  CATEGORY IN (
			SELECT CATEGORY
			FROM TB_DEPARTMENT
			WHERE DEPARTMENT_NAME = '환경조경학과'
		      )
GROUP BY DEPARTMENT_NAME
ORDER BY 1;


SELECT *
FROM TB_CLASS_PROFESSOR;






DROP TABLE TEST_MEMBER;

CREATE TABLE TEST_MEMBER(
	ID 		VARCHAR2(50) PRIMARY KEY,
	PWD 	VARCHAR2(50),
	NAME 	VARCHAR2(50),
	AGE		NUMBER,
	MARRY	CHAR(1),
	REGDATE	DATE DEFAULT SYSDATE
);
-- INSERT
INSERT INTO TEST_MEMBER VALUES('acorn', 'acorn','에이콘',5,'y',sysdate);
INSERT INTO TEST_MEMBER (ID,PWD,NAME,AGE,MARRY)
VALUES('acorn1','acorn1','에이콘',5,'y');
INSERT INTO TEST_MEMBER (ID,PWD)
VALUES ('acorn2','acorn2');

SELECT *
FROM	TEST_MEMBER;

SELECT *
FROM	TEST_BOARD;

DROP TEST_BOARD;
CREATE TABLE TEST_BOARD(
	SEQ 	NUMBER PRIMARY KEY,
	WRITER 	VARCHAR2(50) NOT NULL REFERENCES TEST_MEMBER(ID),
	TITLE	VARCHAR2(50),
	CONTENT VARCHAR2(2000),
	REGDATE DATE,
	CNT		NUMBER
);

CREATE SEQUENCE BOARDSEQ;

INSERT INTO TEST_BOARD
VALUES (BOARDSEQ.NEXTVAL, 'acorn','공지','뻥',SYSDATE,0);

DROP TABLE TEST_MEMBER CASCADE CONSTRAINT;

CREATE TABLE TEST_PK(
	ORDERNUM	NUMBER,
	ITEMNUM 	NUMBER,
	QTY			NUMBER CHECK(QTY > 0),
	DESCRIBE	VARCHAR2(2000),
	PRIMARY KEY (ORDERNUM, ITEMNUM)
);

INSERT INTO TEST_PK
VALUES(1,1,10,'테스트');
INSERT INTO TEST_PK
VALUES(1,2,10,'테스트');

INSERT INTO TEST_REF
VALUES (1, NULL, NULL);
INSERT INTO TEST_REF
VALUES (2,1,2);

SELECT * FROM TEST_REF;



CREATE TABLE TEST_REF(
	NUM		    NUMBER PRIMARY KEY,
	ORDERNUM	NUMBER,
	ITEMNUM 	NUMBER,
	FOREIGN KEY (ORDERNUM,ITEMNUM) 
	REFERENCES TEST_PK (ORDERNUM,ITEMNUM)
);



CREATE OR REPLACE VIEW V_EMP
AS SELECT EMP_NAME, DEPT_ID
   FROM EMPLOYEE
   WHERE DEPT_ID = '90';
   
CREATE OR REPLACE VIEW V_EMP_DEPT_JOB
AS SELECT EMP_NAME,
		  DEPT_NAME,
		  JOB_TITLE
   FROM   EMPLOYEE
   LEFT JOIN DEPARTMENT USING (DEPT_ID)
   LEFT JOIN JOB USING (JOB_ID)
   WHERE JOB_TITLE='사원';
   
   
UPDATE TEST_BOARD
SET	   TITLE = '배고프당' , CONTENT = '밥 묵자'
WHERE  SEQ = 1;

DELETE FROM TEST_BOARD
WHERE SEQ = 1;

ALTER TABLE TEST_BOARD RENAME TO EXAMPLE_BOARD;
SELECT *
FROM EXAMPLE_BOARD;

ALTER TABLE EXAMPLE_BOARD RENAME COLUMN CNT TO VIEWCNT;

ALTER TABLE DEPARTMENT ADD (MGR_ID CHAR(3));
SELECT * FROM DEPARTMENT;


CREATE TABLE EMP5
(EMP_ID		CHAR(3),
 EMP_NAME 	VARCHAR2(20),
 ADDR1		VARCHAR2(20) DEFAULT '서울',
 ADDR2		VARCHAR2(100));
 
 INSERT INTO EMP5
 VALUES ('A10', '임태희', DEFAULT, '청담동');
 
 INSERT INTO EMP5
 VALUES ('B10', '이병언', DEFAULT, '분당 정자동');
 
 SELECT * FROM EMP5;
 
 ALTER TABLE EMP5
 MODIFY (ADDR1 DEFAULT '경기');
 
 INSERT INTO EMP5
 VALUES ('C10', '이승우', DEFAULT, '분당 효자촌');
 
 SELECT * FROM EMP5;
 
 

 