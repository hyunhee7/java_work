package example3;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class MemberFrame extends JFrame implements ActionListener{
	
	//멤버필드 정의하기
	JTextField inputNum, inputName, inputAddr;
	DefaultTableModel model;
	JButton saveBtn, deleteBtn, updateBtn;
	JTable table;
	
	List<Map<String, Object>> members;
	
	//생성자
	public MemberFrame(){
		initUI();
	}
	
	//메소드
	public void initUI(){
		
		//레이아웃 설정
		setLayout(new BorderLayout());
		//상단 페널 객체 생성
		JPanel topPanel=new JPanel();
		
		//레이블 객체 생성
		JLabel label1=new JLabel("번호");
		JLabel label2=new JLabel("이름");
		JLabel label3=new JLabel("주소");
		
		//텍스트 필드 객체 생성
		inputNum=new JTextField(10);
		inputName=new JTextField(10);
		inputAddr=new JTextField(10);
		
		saveBtn=new JButton("저장");
		deleteBtn=new JButton("삭제");
		updateBtn=new JButton("수정");
		saveBtn.addActionListener(this);
		deleteBtn.addActionListener(this);
		updateBtn.addActionListener(this);
		
		//페널에 컴포넌트 추가 하기 
		topPanel.add(label1);
		topPanel.add(inputNum);
		topPanel.add(label2);
		topPanel.add(inputName);
		topPanel.add(label3);
		topPanel.add(inputAddr);
		topPanel.add(saveBtn);
		topPanel.add(deleteBtn);
		topPanel.add(updateBtn);
		
		//프레임의 상단에 페널 배치하기
		add(topPanel, BorderLayout.NORTH);		
		//가로 세로 크기 지정하기
		this.setSize(800, 500);
		//화면의 가운데 배치 되도록
		setLocationRelativeTo(null);
		setVisible(true);
		
		loadFromFile();
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		//눌러진 버튼의 참조값을 비교해서 분기한다.
		if(e.getSource() == saveBtn){
			saveToFile();
		}else if(e.getSource() == deleteBtn){
			
		}else if(e.getSource() == updateBtn){
			
		}
	}
	
	//입력한 내용을 파일에 저장하는 메소드
	public void saveToFile(){
		//TextField 에 입력한 내용을 읽어온다.
		int num = Integer.parseInt(inputNum.getText());
		String name = inputName.getText();
		String addr = inputAddr.getText();
		
		//HashMap 객체에 회원의 정보 담기
		Map<String, Object> map=new HashMap<>();
		map.put("number", num);
		map.put("name", name);
		map.put("addr", addr);
		//ArrayList 객체에 회원 한명의 정보를 담고
		members=new ArrayList<>();
		members.add(map);
		//파일에 출력해서 영구 저장한다.
		FileOutputStream fos=null;
		ObjectOutputStream oos=null;
		try{
			fos=new FileOutputStream("c:/myFolder/MyMembers.dat");
			//객체 정보를 출력할 수 있는 객체 생성하기
			oos=new ObjectOutputStream(fos);
			//List 객체 출력하기
			oos.writeObject(members);
			oos.flush();
			//알림창 띄우기
			JOptionPane.showMessageDialog(this, "저장했습니다");
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
				if(fos!=null)fos.close();
				if(oos!=null)oos.close();
			}catch(Exception e){}
		}
		
	}
	
	//파일에 저장된 회원 목록을 읽어들이는 메소드
	public void loadFromFile(){
		FileInputStream fis=null;
		ObjectInputStream ois=null;
		try{
			fis=new FileInputStream("c:/myFolder/MyMembers.dat");
			ois=new ObjectInputStream(fis);
			members=(List)ois.readObject();
		}catch(FileNotFoundException fne){
			//파일을 만든적이 없다면 FileNotFoundException 발생
			members=new ArrayList<>();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	public static void main(String[] args) {
		new MemberFrame();
	}
}
